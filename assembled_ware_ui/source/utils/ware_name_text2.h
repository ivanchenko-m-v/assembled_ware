/// $Header
/// ============================================================================
///		Author		: M. Ivanchenko
///		Date create	: 18-03-2016
///		Date update	: 30-12-2016
///		Comment		:
/// ============================================================================
#ifndef __WARE_NAME_TEXT2_H__
#define __WARE_NAME_TEXT2_H__

#include <QString>
#include <QStringList>
#include <QHash>

namespace rele_auto
{

	typedef QHash<QChar, QChar> ware_symbol_replace_table;
	typedef QHash<QChar, QString> ware_specsymbol_replace_table;

/// ############################################################################
///			class ware_symbol_replacer
/// ############################################################################
	class ware_symbol_replacer
	{
    /// ========================================================================
    ///		CONSTRUCTORS/DESTRUCTOR
    /// ========================================================================
    private:
        /// --------------------------------------------------------------------
		ware_symbol_replacer( );
        /// --------------------------------------------------------------------
        ware_symbol_replacer( const ware_symbol_replacer &rhs );

    /// ========================================================================
    ///		FUNCTIONS
    /// ========================================================================
    private:
        /// --------------------------------------------------------------------
		void init( );

    public:
        /// --------------------------------------------------------------------
		void replace( QString &s );
        /// --------------------------------------------------------------------
		friend ware_symbol_replacer& the_ware_symbol_replacer( );

    /// ========================================================================
    ///			FIELDS
    /// ========================================================================
	private:
		//хэш-таблица замены символов:
		//key - символ для замены, value - подстановочный символ
		ware_symbol_replace_table	_letters_table;

	};//class ware_symbol_replacer

/// ############################################################################
/// ----------------------------------------------------------------------------

/// ############################################################################
///			class ware_specsymbol_replacer
/// ############################################################################
	class ware_specsymbol_replacer
	{
    /// ========================================================================
    ///		CONSTRUCTORS/DESTRUCTOR
    /// ========================================================================
    private:
        /// --------------------------------------------------------------------
		ware_specsymbol_replacer( );
        /// --------------------------------------------------------------------
        ware_specsymbol_replacer( const ware_specsymbol_replacer &rhs );

    /// ========================================================================
    ///		FUNCTIONS
    /// ========================================================================
    private:
        /// --------------------------------------------------------------------
		void init( );

    public:
        /// --------------------------------------------------------------------
		void replace( QString &s, QChar delimeter = QChar( ':' ) );
        /// --------------------------------------------------------------------
		friend ware_specsymbol_replacer& the_ware_specsymbol_replacer( );

    /// ========================================================================
    ///			FIELDS
    /// ========================================================================
	private:
		//хэш-таблица замены специальных символов:
		//key - символ для замены, value - подстановочный символ
		ware_specsymbol_replace_table	_spec_table;

	};//class ware_specsymbol_replacer


/// ############################################################################
/// ----------------------------------------------------------------------------

/// ############################################################################
///			class ware_name_text2
/// ############################################################################
    class ware_name_text2 : public QString
	{
    /// ========================================================================
    ///		CONSTRUCTORS/DESTRUCTOR
    /// ========================================================================
    private:
        /// --------------------------------------------------------------------
        ware_name_text2( const ware_name_text2 &rhs );

	public:
        /// --------------------------------------------------------------------
        ware_name_text2( ) :
			QString( )
        { }
        /// --------------------------------------------------------------------
        explicit ware_name_text2( const QString &text );
        /// --------------------------------------------------------------------
        virtual ~ware_name_text2( );

    /// ========================================================================
    ///		FUNCTIONS
    /// ========================================================================
    private:
        /// --------------------------------------------------------------------
		void prepare( );
        /// --------------------------------------------------------------------
		void replace_letters( );
		void replace_num_quot_P3( );
		void replace_PML_C_RTL( );
		void replace_not_alnum( );
		void parse_words( );
		void replace_spec( QString &s );
		void insert_syllable_alpha_num( QString &s );
		void insert_syllable_num_alpha( QString &s );
		void remove_duplicates( );

    /// ========================================================================
    ///		PROPERTIES
    /// ========================================================================
	public:
        /// --------------------------------------------------------------------
        /// max_syllable_length
        /// --------------------------------------------------------------------
		int max_syllable_length( ) const
		{
			return this->_MAX_SYLLABLE_LEN;
		}
		void max_syllable_length( const int &syllable_length )\
		{
			this->_MAX_SYLLABLE_LEN = syllable_length;
		}
        /// --------------------------------------------------------------------
        /// syllable_delimeter
        /// --------------------------------------------------------------------
		QChar syllable_delimeter( ) const
		{
			return this->_SYLLABLE_DELIMETER;
		}
		void syllable_delimeter( const QChar &delimeter )\
		{
			QChar old_delimeter = this->_SYLLABLE_DELIMETER;
			this->_SYLLABLE_DELIMETER = delimeter;
			if( !this->isEmpty( ) )
			{
				this->replace( old_delimeter, this->_SYLLABLE_DELIMETER );
			}
		}
        /// --------------------------------------------------------------------
		QString atom_keys_text( ) const;

    /// ========================================================================
    ///		OPERATORS
    /// ========================================================================
    public:
        /// --------------------------------------------------------------------
        ware_name_text2& operator=( const ware_name_text2 &rhs );
        /// --------------------------------------------------------------------
        ware_name_text2& operator=( const QString &rhs );

	public:

    /// ========================================================================
    ///			FIELDS
    /// ========================================================================
	private:
		int		_MAX_SYLLABLE_LEN = 6;
		QChar	_SYLLABLE_DELIMETER = '/';

		QStringList _syllables;

	};//class ware_name_text2
/// ############################################################################
/// ----------------------------------------------------------------------------

}//namespace rele_auto
#endif // __WARE_NAME_TEXT2_H__
